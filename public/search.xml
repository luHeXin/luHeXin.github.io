<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于hexo框架的博客，Markdown文章无法插入图片问题的解决]]></title>
    <url>%2F2019%2F08%2F01%2F%E5%85%B3%E4%BA%8Ehexo%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%8Cmarkdown%E6%96%87%E7%AB%A0%E6%97%A0%E6%B3%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[br/&gt;(d:\Blog\luHeXin\source_posts\images\初探git\2.png)). 前言：在使用Markdown编辑博客文章时，发现在Next主题以及很多其他主题下，博客页面均无法显示图片，而hexo框架的内置主题landscape缺可以正常加载图片。在查询了很多资料无果后，发现是简单的存储路径问题。因此，此篇文章除了着手于该问题的解决外，还将总结相对路径与绝对路径的区别与使用。 使用Markdown将图片插入文章Markdown支持图片的后缀名为.jpg,.png, .gif,通过Markdown语法![图片描述]（图片路径）即可。如，我将一个图片保存到D:\Blog\luHeXin\source\images\文件路径\1.jdg路径，而此篇文章保存在D:\Blog\luHeXin\source\_posts如下路径，则只需要使用语法![图片](/source/images/文件路径/1.jpg)便可在本地中看到图片，但是部署到githubPages时却出现如下效果,只有将上述路径修改为![图片] 相对路径的表示方法 ./ ：代表文件所在的目录（可以省略不写） ../ ：代表文件所在的父级目录 ../../ ：代表文件所在的父级目录的父级目录 / ：代表文件所在的根目录]]></content>
      <categories>
        <category>文件路径问题</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>路径</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初探git和github]]></title>
    <url>%2F2019%2F07%2F31%2F%E5%88%9D%E6%8E%A2git%E5%92%8Cgithub%2F</url>
    <content type="text"><![CDATA[简介此篇文章内容浅显，针对于未接触过git的小白。该篇文章将简单的介绍如何通过git来上传自己的代码至github，如何进行分支开发，以及如何克隆github中的代码到本地。 第一步下载git注册github账号 第二步 （在github中建立仓库）登录github，点击右上方头像，展开如下菜单，并点击Your profile，进入个人主页。 选择并点击上方的Respositories便可进入仓库,点击右侧绿色的按钮new进行新建仓库. 添加必要信息之后点击Create Respositories之后便可便成功创建了一个仓库。 如上图，仓库创建成功。 第三步（创建SSH）点击右上角头像，展开目录后，点击setting进入设置页面。 点击左侧SSH and GPG keys,再点击new ssh key。 这时他需要填Title和key Title一栏可以随意填写，而key一栏我们则需要手动获取。 回到桌面，鼠标右键，选择git bash here，打开git命令栏窗口。输入ssh-keygen点击回车,便会出现如下路径（路径汇银因客户端的不同而不同）。 按此路径找到id_rsa.pub文件，打开方式选择以记事本方式打开，这里的内容便是key栏中需要填写的内容，复制以下内容，粘贴到key一栏即可。 重新回到仓库界面，点击clone or down，使用ssh，并复制一下这个链接 第四步 （复制代码至本地）在任意位置创建一个空文件夹（文件夹名字随意），打开文件夹后，鼠标右键,选择git bash here，打开git命令栏窗口。输入指令git clone + 粘贴刚才复制的那一段链接，并回车，如下图所示 回到文件夹中，便看到原本空文件夹里多出了一个文件夹，此文件夹便是github中的文件。 第五步（1） （将代码推到github）这是git推送文件的流程 工作区：便是本地电脑中可以看到的目录 暂存区：一般存放在 “.git目录下” 下的index文件（.git/index）中 版本库：工作区的一个隐藏目录.git（是Git的版本库）。 我们打开上一步中克隆的文件夹，新建一个文件1.txt 鼠标右键,选择git bash here输入指令git add . 并回车，将文件添加到版本区。(这里的 .代表该目录下所有文件至版本区也可以单独添加1.txt文件git add 1.txt) 继续输入指令git commit -m &quot;update&quot;（双引号里的内容是提交到github中的文件描述，所以双引号里的内容任意） 最后输入指令git push将文件推到远端。回到仓库刷新后，便可看到提交的文件 第五步（2） （将代码推到github）（若读者是已经进行了第四步与第五步（2）可以先不进行本步骤操作）上一步是在复制代码至本地的基础上进行的，若没进行第四步的操作，直接将代码推到github上则需 新建需推到远端的文件如1.txt. 在文件夹中打开git命令窗口，输入git init进行初始化，此时系统会自动创建.git隐藏文件。 回到github仓库，先复制https链接，接着在命令窗口输入git remote add origin 复制好的链接 git pull origin master ，进行刷新 接着我们就可以进行提交操作 git add . git commi -m &quot;dev&quot; 由于这是初始化后的第一次推到远端，所以我们指出推到的分支，即输入如下命令，将文件推到master分支上 git push origin master 删除提交的文件可以直接在github上进行可视化的编辑，点击要删除的文件名，进入该文件在github中的文件属性页，进行如下图操作。 分支开发 依旧在文件夹中打开git命令行窗口。由于我们在远端github上执行了删除命令的操作，导致远端的文件与本地文件不同，这时便需要在命令行窗口输入指令git pull 并回车，进行刷新操作。（有时在不确定远端是否更改时也可以通过git pull指令来进行刷新） 刷新之后，通过指令git branch dev并回车，创建分支（dev是创建的分支名，在这里也可以随意命名分支）。 git checkout dev并回车,便切换到了dev分支。 在文件夹中创建文件dev.txt 提交分支文件，git add . git commi -m &quot;dev&quot;git push 此时由于是第一次在该分支提交文件，git push指令并没有是文件提交到远端，此时根据提示输入git push --set-upstream origin dev回车后，待push完毕后便可看到仓库中多了一个分支，分支中的文件便是刚提交的文件。（只有dev分支有dev.txt文件） 后续提交 返回文件夹新建dev2.txt文件提交分支文件，git add . git commi -m &quot;dev&quot;git push 此时发现不需输入指令git push --set-upstream origin dev便可提交到github中，其实，只有在切换分支后以及git的初始化后的第一次提交会提示需要在添加此指令，在以后的push过程中并不需要添加此指令。在github中查看，dev2.txt已上传完毕 合并dev分支至master git checkout master切换到主分支git pull刷新git merge dev合并请求git push推到github上回到仓库，切换到master分支，这时发现master分支多出了dev.txt和dev2.txt两个原本在dev分支上的文件。此时便说明分支合并成功了。值得注意的是，我们如今已切换到了master分支。若想将文件提交到刚刚的dev分支上则需先通过指令git checkout dev切换会dev分支，再进行陆续操作。 参考文章https://www.runoob.com/git/git-workspace-index-repo.html]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客美化_更改选中字符及超链接颜色]]></title>
    <url>%2F2019%2F07%2F30%2F%E5%8D%9A%E5%AE%A2%E9%80%89%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%BB%A5%E5%8F%8A%E8%B6%85%E9%93%BE%E6%8E%A5%E9%A2%9C%E8%89%B2%2F</url>
    <content type="text"><![CDATA[前言NesT主题默认的选中字符颜色以及超链接颜色和周围网页、文字颜色相近不易区分。因此，选择手动更改二者颜色。 修改步骤第一步打开主题配置文件_config.yml查看自己选择的主题方案。在这里我选择的是scheme: Gemini，因此，接下来我也将以该方案为例。 第二步打开\themes\next\source\css\_schemes\Gemini\index.styl若已选择其他主题，则只需按路径打开_schemes文件夹下对应的方案，在选择打开对应的inde.styl文件即可。 第三步修改选中字符的颜色在上一步打开的文件末尾添加如下代码 12345// 修改选中字符的颜色::selection &#123; background: #3366ff; color: #FFFFFF; &#125; 选中字符后字符的颜色变为白色，选中的背景为蓝色。当然，也可以根据RGB颜色对照表在这里随意改成自己喜欢颜色。 第四步修改代码块选中的颜色打开，如下路径\themes\next\source\css\_common\components\highlight\highlight.style找到 123*::selection &#123; background: $highlight-selection; &#125; 修改为 1234//修改代码块颜色*::selection &#123; background: #3366ff; &#125; 这里更改代码块选中背景色为蓝色。 第五步修改超链接颜色打开\themes\next\source\css\_schemes\Gemini\index.styl在文件末尾添加如下代码 1234567891011// 文章内链接文本样式 .post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125; &#125; 参考文章https://www.jianshu.com/p/2a8d399f1266]]></content>
      <categories>
        <category>博客美化</category>
      </categories>
      <tags>
        <tag>博客美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客美化_点击特效的实现]]></title>
    <url>%2F2019%2F07%2F30%2F%E5%8D%9A%E5%AE%A2%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88%2F</url>
    <content type="text"><![CDATA[简介本博客基于Hexo博客框架，主题选择的是NexT( NexT使用文档)。通过使用jQuery，为博客添加点击特效。 思路 通过jQuery click()函数，获取html标签中点击的事件，并调用相应方法 12$("html").click(function(e) &#123;&#125; 内置一个数组用来存储点击时出现的内容，通过jQuery设置返回的元素内容 123var a = new Array("奋斗!!!","努力!!!","Learning~","Coding~","Summarizing~","Advancing~","VENI","VIDI","VICI","٩(•̤̀ᵕ•̤́๑)ᵒᵏᵎᵎᵎᵎ");var i = $("&lt;span&gt;&lt;/span&gt;").text(a[a_index]);a_index = (a_index + 1) % a.length; 在这里jQuery返回的数组内容顺序是按照数组a[0]有序读到最后的。若将 1a_index = (a_index + 1) % a.length; 替换为 1a_index = Math.round(Math.random()*a.length); 则将随机返回数组内的内容。 获取点击时鼠标的位置，将横纵坐标分别存储在变量x、y中。并在css中添加字体特效颜色，以及出现字体的位置。 123456789var x = e.pageX,y = e.pageY;i.css(&#123; "z-index": 66666666666666666666666666666666666666666666666666666666666, "top": y -10, "left": x, "position": "absolute", "font-weight": "bold", "color": "rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")" &#125;); 这里为保证特效不被遮挡一次设置一个较大的z-index。字体出现的初始位置为鼠标点击位置正上方10单位的位置上. 将字体添加到html中 1$("html").append(i); 通过jQuery animate()方法制作点击特效 12345678i.animate(&#123; "top": y-180 , "opacity": 0 &#125;, 1500, function() &#123; i.remove(); &#125;); 在这里设置动画的效果为特效字体从鼠标点击位置开始逐渐向上180个单位，上升的过程中逐渐淡化，在1.5秒后消失。 完整代码12345678910111213141516171819202122232425262728var a_index = 0;jQuery(document).ready(function($) &#123; $("html").click(function(e) &#123; var a = new Array("奋斗!!!","努力!!!","Learning~","Coding~","Summarizing~","Advancing~","VENI","VIDI","VICI","٩(•̤̀ᵕ•̤́๑)ᵒᵏᵎᵎᵎᵎ"); var i = $("&lt;span&gt;&lt;/span&gt;").text(a[a_index]); a_index = (a_index + 1) % a.length; // a_index = Math.round(Math.random()*a.length);//随机出现点击内容 var x = e.pageX, y = e.pageY; i.css(&#123; "z-index": 66666666666666666666666666666666666666666666666666666666666, "top": y -10, "left": x, "position": "absolute", "font-weight": "bold", "color": "rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")" &#125;); $("html").append(i); i.animate(&#123; "top": y - 180 , "opacity": 0 &#125;, 1500, function() &#123; i.remove(); &#125;); &#125;);&#125;); 相关配置由于此博客选择的主题是NexT，因此有关的配置我也以NexT为例。 将上述js代码命名为special-effect.js，并移动到如下目录：\themes\next\source\js 在如下路径：\themes\next\layout\layout.swig找到倒数第二行的标签的前面添加如下代码 123&#123;% if theme.special-effect %&#125;&lt;script type="text/javascript" src="/js/special-effect.js"&gt;&lt;/script&gt;&#123;% endif %&#125; 在主题配置文件（\themes\next_congig.yml）末尾加入： 12#special-effectspecial-effect: true]]></content>
      <categories>
        <category>博客美化</category>
      </categories>
      <tags>
        <tag>博客美化</tag>
        <tag>点击特效</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初心]]></title>
    <url>%2F2019%2F07%2F28%2F%E5%88%9D%E5%BF%83%2F</url>
    <content type="text"><![CDATA[初心 搭建此博客是为了总结学习过程中遇到的一些问题及其解决方法。 博客内容可能过于浅显，但是我将通过不断地学习来增加自身的知识储备，希望有朝一日此博客可以称谓“硬核”技术博客，并能实实在在的帮助自己及所需之人解决生活中一些细微的问题。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>初心</tag>
      </tags>
  </entry>
</search>
